package main

import (
	"crypto/md5"
	"flag"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"runtime"
	"sort"
	"strings"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
type FileInfo struct {
	Path     string    // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
	Size     int64     // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
	Hash     string    // MD5 —Ö–µ—à —Ñ–∞–π–ª–∞
	Modified time.Time // –í—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
type DuplicateGroup struct {
	Hash  string     // –•–µ—à –≥—Ä—É–ø–ø—ã
	Size  int64      // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤
	Files []FileInfo // –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ö–µ—à–µ–º
	Count int        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è MD5 —Ö–µ—à–∞ —Ñ–∞–π–ª–∞
func calculateMD5(filePath string) (string, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return "", err
	}
	defer file.Close()

	hash := md5.New()
	if _, err := io.Copy(hash, file); err != nil {
		return "", err
	}

	return fmt.Sprintf("%x", hash.Sum(nil)), nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
func scanDirectory(dirPath string, extensions []string) ([]FileInfo, error) {
	var files []FileInfo

	fmt.Printf("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %s\n", dirPath)

	err := filepath.Walk(dirPath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
		if info.IsDir() {
			return nil
		}

		// –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º, –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
		if len(extensions) > 0 {
			ext := strings.ToLower(filepath.Ext(path))
			found := false
			for _, allowedExt := range extensions {
				if ext == strings.ToLower(allowedExt) {
					found = true
					break
				}
			}
			if !found {
				return nil
			}
		}

		// –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
		hash, err := calculateMD5(path)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ %s: %v\n", path, err)
			return nil
		}

		files = append(files, FileInfo{
			Path:     path,
			Size:     info.Size(),
			Hash:     hash,
			Modified: info.ModTime(),
		})

		return nil
	})

	return files, err
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
func findDuplicates(files []FileInfo) []DuplicateGroup {
	fmt.Printf("üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ %d —Ñ–∞–π–ª–æ–≤...\n", len(files))

	// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ö–µ—à—É
	hashGroups := make(map[string][]FileInfo)
	for _, file := range files {
		hashGroups[file.Hash] = append(hashGroups[file.Hash], file)
	}

	// –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
	var duplicates []DuplicateGroup
	for hash, groupFiles := range hashGroups {
		if len(groupFiles) > 1 {
			duplicates = append(duplicates, DuplicateGroup{
				Hash:  hash,
				Size:  groupFiles[0].Size,
				Files: groupFiles,
				Count: len(groupFiles),
			})
		}
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (—Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ –¥—É–±–ª–∏–∫–∞—Ç—ã —Å–Ω–∞—á–∞–ª–∞)
	sort.Slice(duplicates, func(i, j int) bool {
		return duplicates[i].Size > duplicates[j].Size
	})

	return duplicates
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func printResults(duplicates []DuplicateGroup, showDetails bool) {
	if len(duplicates) == 0 {
		fmt.Println("‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
		return
	}

	fmt.Printf("üéØ –ù–∞–π–¥–µ–Ω–æ %d –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:\n\n", len(duplicates))

	totalWastedSpace := int64(0)

	for i, group := range duplicates {
		fmt.Printf("üìÅ –ì—Ä—É–ø–ø–∞ %d (—Ö–µ—à: %s, —Ä–∞–∑–º–µ—Ä: %s):\n",
			i+1, group.Hash[:8]+"...", formatSize(group.Size))

		// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –ø–µ—Ä–≤—ã–π)
		sort.Slice(group.Files, func(a, b int) bool {
			return group.Files[a].Modified.Before(group.Files[b].Modified)
		})

		for j, file := range group.Files {
			status := "üîÑ"
			if j == 0 {
				status = "‚úÖ" // –°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª - –æ—Å—Ç–∞–≤–ª—è–µ–º
			} else {
				status = "üóëÔ∏è " // –û—Å—Ç–∞–ª—å–Ω—ã–µ - –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å
			}

			fmt.Printf("  %s %s (%s, %s)\n",
				status,
				file.Path,
				formatSize(file.Size),
				file.Modified.Format("2006-01-02 15:04:05"))
		}

		// –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ (–≤—Å–µ —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ –æ–¥–Ω–æ–≥–æ)
		wastedSpace := group.Size * int64(group.Count-1)
		totalWastedSpace += wastedSpace

		fmt.Printf("  üíæ –ú–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å: %s\n\n", formatSize(wastedSpace))
	}

	fmt.Printf("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("   –í—Å–µ–≥–æ –≥—Ä—É–ø–ø –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: %d\n", len(duplicates))
	fmt.Printf("   –ú–æ–∂–Ω–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–∞: %s\n", formatSize(totalWastedSpace))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
func formatSize(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø—Ä–∞–≤–∫–∏
func printHelp() {
	fmt.Println("üîç –ü–æ–∏—Å–∫–æ–≤–∏–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤")
	fmt.Println("==============================")
	fmt.Println()
	fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
	fmt.Printf("  %s [–æ–ø—Ü–∏–∏] <–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è>\n", os.Args[0])
	fmt.Println()
	fmt.Println("–û–ø—Ü–∏–∏:")
	fmt.Println("  -ext <—Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è>  –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
	fmt.Println("  -details           –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
	fmt.Println("  -help              –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É")
	fmt.Println()
	fmt.Println("–ü—Ä–∏–º–µ—Ä—ã:")
	fmt.Printf("  %s /path/to/folder\n", os.Args[0])
	fmt.Printf("  %s -ext .jpg,.png,.gif /path/to/images\n", os.Args[0])
	fmt.Printf("  %s -details /path/to/folder\n", os.Args[0])
	fmt.Println()
	fmt.Println("–°–±–æ—Ä–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º:")
	fmt.Println("  Windows:  GOOS=windows GOARCH=amd64 go build -o finder.exe")
	fmt.Println("  Linux:    GOOS=linux GOARCH=amd64 go build -o finder_linux")
	fmt.Println("  macOS:    GOOS=darwin GOARCH=arm64 go build -o finder_mac")
}

func main() {
	// –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	var extensions string
	var showDetails bool
	var showHelp bool

	flag.StringVar(&extensions, "ext", "", "–§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º —Ñ–∞–π–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")
	flag.BoolVar(&showDetails, "details", false, "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
	flag.BoolVar(&showHelp, "help", false, "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
	flag.Parse()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
	if showHelp {
		printHelp()
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
	args := flag.Args()
	if len(args) == 0 {
		fmt.Println("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
		fmt.Println("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
		os.Exit(1)
	}

	dirPath := args[0]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	if _, err := os.Stat(dirPath); os.IsNotExist(err) {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n", dirPath)
		os.Exit(1)
	}

	// –ü–∞—Ä—Å–∏–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
	var extList []string
	if extensions != "" {
		extList = strings.Split(extensions, ",")
		for i, ext := range extList {
			extList[i] = strings.TrimSpace(ext)
			if !strings.HasPrefix(extList[i], ".") {
				extList[i] = "." + extList[i]
			}
		}
	}

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
	fmt.Println("üîç –ü–æ–∏—Å–∫–æ–≤–∏–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤")
	fmt.Println("==============================")
	fmt.Printf("–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: %s/%s\n", runtime.GOOS, runtime.GOARCH)
	fmt.Printf("–í–µ—Ä—Å–∏—è Go: %s\n", runtime.Version())
	fmt.Println()

	startTime := time.Now()

	// –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
	files, err := scanDirectory(dirPath, extList)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: %v\n", err)
		os.Exit(1)
	}

	if len(files) == 0 {
		fmt.Println("üìÅ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
		return
	}

	fmt.Printf("üìÅ –ù–∞–π–¥–µ–Ω–æ %d —Ñ–∞–π–ª–æ–≤\n\n", len(files))

	// –ò—â–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
	duplicates := findDuplicates(files)

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	printResults(duplicates, showDetails)

	elapsed := time.Since(startTime)
	fmt.Printf("‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", elapsed)
}
