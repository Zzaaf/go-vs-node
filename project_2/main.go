package main

import (
	"fmt"
	"io"
	"net/http"
	"regexp"
	"strings"
	"sync"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
type ParseResult struct {
	URL     string        // URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	Title   string        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	Error   error         // –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ
	Elapsed time.Duration // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
func parsePageTitle(url string) ParseResult {
	start := time.Now()

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	client := &http.Client{
		Timeout: 10 * time.Second,
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å
	resp, err := client.Get(url)
	if err != nil {
		return ParseResult{
			URL:     url,
			Title:   "",
			Error:   err,
			Elapsed: time.Since(start),
		}
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return ParseResult{
			URL:     url,
			Title:   "",
			Error:   err,
			Elapsed: time.Since(start),
		}
	}

	// –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ HTML
	titleRegex := regexp.MustCompile(`<title[^>]*>([^<]*)</title>`)
	matches := titleRegex.FindStringSubmatch(string(body))

	var title string
	if len(matches) > 1 {
		title = strings.TrimSpace(matches[1])
	} else {
		title = "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"
	}

	return ParseResult{
		URL:     url,
		Title:   title,
		Error:   nil,
		Elapsed: time.Since(start),
	}
}

// –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ (–º–µ–¥–ª–µ–Ω–Ω–∞—è)
func parseSequential(urls []string) []ParseResult {
	fmt.Println("üêå –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
	start := time.Now()

	var results []ParseResult
	for _, url := range urls {
		fmt.Printf("   –ü–∞—Ä—Å–∏–Ω–≥: %s\n", url)
		result := parsePageTitle(url)
		results = append(results, result)
	}

	elapsed := time.Since(start)
	fmt.Printf("‚úÖ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞: %v\n\n", elapsed)

	return results
}

// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ (–±—ã—Å—Ç—Ä–∞—è)
func parseParallel(urls []string) []ParseResult {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞...")
	start := time.Now()

	// –ö–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	resultsChan := make(chan ParseResult, len(urls))

	// WaitGroup –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ URL
	for _, url := range urls {
		wg.Add(1) // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –≥–æ—Ä—É—Ç–∏–Ω

		go func(url string) {
			defer wg.Done() // –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ—Ä—É—Ç–∏–Ω—ã

			fmt.Printf("   –ü–∞—Ä—Å–∏–Ω–≥: %s (–≤ –≥–æ—Ä—É—Ç–∏–Ω–µ)\n", url)
			result := parsePageTitle(url)
			resultsChan <- result // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
		}(url)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö –≥–æ—Ä—É—Ç–∏–Ω
	go func() {
		wg.Wait()          // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
		close(resultsChan) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª
	}()

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞
	var results []ParseResult
	for result := range resultsChan {
		results = append(results, result)
	}

	elapsed := time.Since(start)
	fmt.Printf("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞: %v\n\n", elapsed)

	return results
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func printResults(results []ParseResult, title string) {
	fmt.Printf("üìä %s:\n", title)
	fmt.Println(strings.Repeat("-", 80))

	for _, result := range results {
		if result.Error != nil {
			fmt.Printf("‚ùå %s: –û—à–∏–±–∫–∞ - %v (–≤—Ä–µ–º—è: %v)\n",
				result.URL, result.Error, result.Elapsed)
		} else {
			fmt.Printf("‚úÖ %s: %s (–≤—Ä–µ–º—è: %v)\n",
				result.URL, result.Title, result.Elapsed)
		}
	}
	fmt.Println()
}

func main() {
	fmt.Println("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –≤ Go")
	fmt.Println("=====================================")
	fmt.Println()

	// –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
	urls := []string{
		"https://httpbin.org/html",
		"https://httpbin.org/json",
		"https://httpbin.org/xml",
		"https://httpbin.org/robots.txt",
		"https://httpbin.org/user-agent",
	}

	fmt.Printf("üìù –ü–∞—Ä—Å–∏–º %d URL...\n\n", len(urls))

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
	sequentialResults := parseSequential(urls)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
	parallelResults := parseParallel(urls)

	// –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	printResults(sequentialResults, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")
	printResults(parallelResults, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞")

	// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	fmt.Println("üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
	fmt.Println("=================================")

	// –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞
	var sequentialTime, parallelTime time.Duration
	for _, result := range sequentialResults {
		sequentialTime += result.Elapsed
	}
	for _, result := range parallelResults {
		parallelTime += result.Elapsed
	}

	fmt.Printf("–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π: %v\n", sequentialTime)
	fmt.Printf("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π: %v\n", parallelTime)

	if parallelTime > 0 {
		speedup := float64(sequentialTime) / float64(parallelTime)
		fmt.Printf("–£—Å–∫–æ—Ä–µ–Ω–∏–µ: %.2fx\n", speedup)
	}

	fmt.Println()
	fmt.Println("üéâ –ö–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ Go:")
	fmt.Println("‚Ä¢ go func() - –∑–∞–ø—É—Å–∫ –≥–æ—Ä—É—Ç–∏–Ω—ã")
	fmt.Println("‚Ä¢ sync.WaitGroup - –æ–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ—Ä—É—Ç–∏–Ω")
	fmt.Println("‚Ä¢ chan - –∫–∞–Ω–∞–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("‚Ä¢ –ì–æ—Ä—É—Ç–∏–Ω—ã –æ—á–µ–Ω—å –¥–µ—à–µ–≤—ã–µ - –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç—ã—Å—è—á–∏!")
}
