package main

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
type Response struct {
	Message   string `json:"message"`
	Timestamp string `json:"timestamp"`
	Status    string `json:"status"`
	Note      string `json:"note,omitempty"`
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –¥–æ–ª–≥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
func simulateLongOperation() string {
	// –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é - 10 —Å–µ–∫—É–Ω–¥
	time.Sleep(10 * time.Second)
	return "–î–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
func fastHandler(w http.ResponseWriter, r *http.Request) {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CORS
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	response := Response{
		Message:   "–ü—Ä–∏–≤–µ—Ç –æ—Ç Go —Å–µ—Ä–≤–µ—Ä–∞!",
		Timestamp: time.Now().Format(time.RFC3339),
		Status:    "success",
	}

	json.NewEncoder(w).Encode(response)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
func slowHandler(w http.ResponseWriter, r *http.Request) {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è CORS
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")

	fmt.Printf("[%s] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\n", time.Now().Format(time.RFC3339))

	// –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ª–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
	result := simulateLongOperation()

	fmt.Printf("[%s] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞\n", time.Now().Format(time.RFC3339))

	response := Response{
		Message:   result,
		Timestamp: time.Now().Format(time.RFC3339),
		Status:    "success",
		Note:      "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –ù–ï –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥—Ä—É–≥–∏–µ –≥–æ—Ä—É—Ç–∏–Ω—ã!",
	}

	json.NewEncoder(w).Encode(response)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è 404 –æ—à–∏–±–æ–∫
func notFoundHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusNotFound)

	response := Response{
		Message: "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
		Status:  "error",
	}

	json.NewEncoder(w).Encode(response)
}

func main() {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	http.HandleFunc("/", fastHandler)
	http.HandleFunc("/slow", slowHandler)
	http.HandleFunc("/*", notFoundHandler)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080
	PORT := ":8080"
	fmt.Printf("üöÄ Go —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost%s\n", PORT)
	fmt.Printf("üìä –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:\n")
	fmt.Printf("   GET / - –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç\n")
	fmt.Printf("   GET /slow - –º–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (10 —Å–µ–∫)\n")
	fmt.Printf("\n‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: –ì–æ—Ä—É—Ç–∏–Ω—ã –ø–æ–∑–≤–æ–ª—è—é—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ!\n")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	log.Fatal(http.ListenAndServe(PORT, nil))
}
