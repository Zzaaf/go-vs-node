package main

import (
	"math"
	"math/rand"
	"syscall/js"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–∫–∏
type Point struct {
	X float64
	Y float64
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —á–∞—Å—Ç–∏—Ü—ã
type Particle struct {
	Position Point
	Velocity Point
	Color    string
	Size     float64
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	canvas    js.Value
	ctx       js.Value
	particles []Particle
	width     float64
	height    float64
	animation js.Value
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç–∏—Ü
func initParticles() {
	particles = make([]Particle, 50)
	colors := []string{"#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD", "#98D8C8"}

	for i := range particles {
		particles[i] = Particle{
			Position: Point{
				X: rand.Float64() * width,
				Y: rand.Float64() * height,
			},
			Velocity: Point{
				X: (rand.Float64() - 0.5) * 2,
				Y: (rand.Float64() - 0.5) * 2,
			},
			Color: colors[rand.Intn(len(colors))],
			Size:  rand.Float64()*3 + 1,
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Å—Ç–∏—Ü
func updateParticles() {
	for i := range particles {
		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
		particles[i].Position.X += particles[i].Velocity.X
		particles[i].Position.Y += particles[i].Velocity.Y

		// –û—Ç—Å–∫–æ–∫ –æ—Ç –≥—Ä–∞–Ω–∏—Ü
		if particles[i].Position.X < 0 || particles[i].Position.X > width {
			particles[i].Velocity.X *= -1
		}
		if particles[i].Position.Y < 0 || particles[i].Position.Y > height {
			particles[i].Velocity.Y *= -1
		}

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö canvas
		particles[i].Position.X = math.Max(0, math.Min(width, particles[i].Position.X))
		particles[i].Position.Y = math.Max(0, math.Min(height, particles[i].Position.Y))
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —á–∞—Å—Ç–∏—Ü
func drawParticles() {
	// –û—á–∏—â–∞–µ–º canvas
	ctx.Call("clearRect", 0, 0, width, height)

	// –†–∏—Å—É–µ–º —á–∞—Å—Ç–∏—Ü—ã
	for _, particle := range particles {
		ctx.Set("fillStyle", particle.Color)
		ctx.Call("beginPath")
		ctx.Call("arc", particle.Position.X, particle.Position.Y, particle.Size, 0, 2*math.Pi)
		ctx.Call("fill")
	}

	// –†–∏—Å—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –±–ª–∏–∑–∫–∏–º–∏ —á–∞—Å—Ç–∏—Ü–∞–º–∏
	drawConnections()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É —á–∞—Å—Ç–∏—Ü–∞–º–∏
func drawConnections() {
	ctx.Set("strokeStyle", "rgba(255, 255, 255, 0.1)")
	ctx.Set("lineWidth", 1)

	for i := 0; i < len(particles); i++ {
		for j := i + 1; j < len(particles); j++ {
			dx := particles[i].Position.X - particles[j].Position.X
			dy := particles[i].Position.Y - particles[j].Position.Y
			distance := math.Sqrt(dx*dx + dy*dy)

			// –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é, –µ—Å–ª–∏ —á–∞—Å—Ç–∏—Ü—ã –±–ª–∏–∑–∫–æ
			if distance < 100 {
				opacity := 1 - distance/100
				ctx.Set("strokeStyle", js.ValueOf("rgba(255, 255, 255, "+js.ValueOf(opacity).String()+")"))
				ctx.Call("beginPath")
				ctx.Call("moveTo", particles[i].Position.X, particles[i].Position.Y)
				ctx.Call("lineTo", particles[j].Position.X, particles[j].Position.Y)
				ctx.Call("stroke")
			}
		}
	}
}

// –§—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
func animate() {
	updateParticles()
	drawParticles()
	animation = js.Global().Call("requestAnimationFrame", js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		animate()
		return nil
	}))
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –º—ã—à–∏
func handleClick(this js.Value, args []js.Value) interface{} {
	event := args[0]
	rect := canvas.Call("getBoundingClientRect")

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas
	clickX := event.Get("clientX").Float() - rect.Get("left").Float()
	clickY := event.Get("clientY").Float() - rect.Get("top").Float()

	// –°–æ–∑–¥–∞–µ–º –≤–∑—Ä—ã–≤ —á–∞—Å—Ç–∏—Ü –≤ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
	createExplosion(clickX, clickY)

	return nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∑—Ä—ã–≤–∞ —á–∞—Å—Ç–∏—Ü
func createExplosion(x, y float64) {
	colors := []string{"#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD", "#98D8C8"}

	// –î–æ–±–∞–≤–ª—è–µ–º 10 –Ω–æ–≤—ã—Ö —á–∞—Å—Ç–∏—Ü –≤ —Ç–æ—á–∫–µ –∫–ª–∏–∫–∞
	for i := 0; i < 10; i++ {
		angle := rand.Float64() * 2 * math.Pi
		speed := rand.Float64()*5 + 2

		particle := Particle{
			Position: Point{X: x, Y: y},
			Velocity: Point{
				X: math.Cos(angle) * speed,
				Y: math.Sin(angle) * speed,
			},
			Color: colors[rand.Intn(len(colors))],
			Size:  rand.Float64()*4 + 2,
		}

		particles = append(particles, particle)
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–∏—Ü
	if len(particles) > 200 {
		particles = particles[len(particles)-200:]
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
func handleResize(this js.Value, args []js.Value) interface{} {
	width = js.Global().Get("innerWidth").Float()
	height = js.Global().Get("innerHeight").Float()

	canvas.Set("width", width)
	canvas.Set("height", height)

	return nil
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
func getSystemInfo() map[string]interface{} {
	return map[string]interface{}{
		"userAgent": js.Global().Get("navigator").Get("userAgent").String(),
		"language":  js.Global().Get("navigator").Get("language").String(),
		"platform":  js.Global().Get("navigator").Get("platform").String(),
		"width":     width,
		"height":    height,
		"particles": len(particles),
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JavaScript
func registerCallbacks() {
	// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç window
	js.Global().Set("getSystemInfo", js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		return getSystemInfo()
	}))

	js.Global().Set("resetParticles", js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		initParticles()
		return nil
	}))

	js.Global().Set("addParticles", js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		count := 10
		if len(args) > 0 {
			count = args[0].Int()
		}

		colors := []string{"#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FFEAA7", "#DDA0DD", "#98D8C8"}

		for i := 0; i < count; i++ {
			particle := Particle{
				Position: Point{
					X: rand.Float64() * width,
					Y: rand.Float64() * height,
				},
				Velocity: Point{
					X: (rand.Float64() - 0.5) * 2,
					Y: (rand.Float64() - 0.5) * 2,
				},
				Color: colors[rand.Intn(len(colors))],
				Size:  rand.Float64()*3 + 1,
			}
			particles = append(particles, particle)
		}

		return nil
	}))
}

func main() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
	rand.Seed(time.Now().UnixNano())

	// –ü–æ–ª—É—á–∞–µ–º canvas —ç–ª–µ–º–µ–Ω—Ç
	canvas = js.Global().Get("document").Call("getElementById", "canvas")
	if canvas.IsUndefined() {
		js.Global().Get("console").Call("error", "Canvas —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç 2D
	ctx = canvas.Call("getContext", "2d")

	// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
	width = js.Global().Get("innerWidth").Float()
	height = js.Global().Get("innerHeight").Float()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
	canvas.Set("width", width)
	canvas.Set("height", height)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—Ü—ã
	initParticles()

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
	canvas.Call("addEventListener", "click", js.FuncOf(handleClick))
	js.Global().Call("addEventListener", "resize", js.FuncOf(handleResize))

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è JavaScript
	registerCallbacks()

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å
	js.Global().Get("console").Call("log", "üöÄ Go WebAssembly –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
	js.Global().Get("console").Call("log", "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:", getSystemInfo())
	js.Global().Get("console").Call("log", "üí° –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ canvas –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∑—Ä—ã–≤–∞ —á–∞—Å—Ç–∏—Ü!")
	js.Global().Get("console").Call("log", "üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: getSystemInfo(), resetParticles(), addParticles(count)")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
	animate()

	// –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
	select {}
}
